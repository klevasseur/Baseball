(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
HomeDirectory[]


(* ::Input::Initialization:: *)
(* :Title:  Baseball *)

(* :Context: Baseball` *)

(* :Author: 	
							 
	Ken Levasseur
	Kenneth_Levasseur@uml.edu
	http://kenlevasseur.org/
	

*)

(* :Package Version: 2.7.0 *)

(* :Mathematica Version:  11.3 *)

(* :This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License., 
			 Ken Levasseur*)
			 
			 


(* ::Input::Initialization:: *)
(* :History:
	April 16, 2007 - first version started
	  May, 2007 :  V1.0  released on 
*)


(* ::Input::Initialization:: *)
Off[ToExpression::sntx]

BeginPackage["Baseball`"];
Print["/Users/ken_l/Library/Mathematica/Applications/Baseball/"];

Off[General::spell,General::spell1];

SetOptions[Graphics, AspectRatio->Automatic];


(* ::Input::Initialization:: *)
OnLineQ::usage="OnLineQ[] is True if you are online and Retrosheet.org is up.";


(* ::Input::Initialization:: *)
RetrosheetDirectory::usage="RetrosheetDirectory[] is the directory relative the HomeDirectory[] that contains retrosheet files.";
RetrosheetEventYears::usage"RetrosheetEventYears returns a list of years for which the retrosheet event files are available."
retrogame::usage="Head of an event sequence for a game.";id::usage="id is the head of an event line identifying the start of a retrogame.";
info::usage="info is the head of an event line providing information on a game.";
version::usage="is the head of an event line giving the Retrosheet version of the data (obsolete).";
data::usage="data is the head of an event line giving game data.";
play::usage="play is the head of an event line containing data on a play.";
start::usage="start is the head of an event line containing starting player data.";
sub::usage="sub is the head of an event line containing substitution information.";
com::usage="com is the head of an event line containing a comment.";
badj::usage="badj is the head of an event line containing a note regarding a batter hitting from an unexpected side of home plate.";
padj::usage="padj is the head of a rare event line containing a note regarding a pitcher throwing with an unexpected arm.";
ladj::usage="ladj is the head of an event line indicating that a player batted out of order.";



(* ::Input::Initialization:: *)
ActualPitchCodes::usage="ActualPitchCodes is a list of pitch codes that correspond to a pitch to the plate."


(* ::Input::Initialization:: *)
AllEvents::usage="AllEvents[teamcode,year] returns a list of all events for all games played by teamcode in year sorted by date.";


(* ::Input::Initialization:: *)
(*AllEventsOnline::usage="AllEventsOnline[teamcode,year] is  the same as AllEvent[teamcode,year], which returns a list of all events for all games played by teamcode in year sorted by date.  It is used by AllEvents if you are online.";*)


(* ::Input::Initialization:: *)
AtBats::usage="AtBats is a list of play results that are considered at-bats for player stats.(Not Correct Yet!!)";


(* ::Input::Initialization:: *)
AtBatQ::usage="AtBatQ[play] returns True if the result of a play is considered an atbat for the batter.";


(* ::Input::Initialization:: *)
AtBats::usage="AtBats is a list of plays that are not outs or hits but count as at-bats.";


(* ::Input::Initialization:: *)
Attendance::usage="Attendance[g] returns the reported attendance in retrogame g, zero if unknown.";


(* ::Input::Initialization:: *)
PlayerAtBats::usage="PlayerAtBats[playerid,game] returns a list of lists of atbats for a player in a particular game.";


(* ::Input::Initialization:: *)
BasicScoreboard::usage="BasicScoreboard[game] returns the result of the game in scoreboard form.";


(* ::Input::Initialization:: *)
BallPark::usage="BallPark[g] returns the ballpark id of the game g's venue.   Ballpark[gamelogrecord] does the same.";


(* ::Input::Initialization:: *)
ClearRosters::usage="ClearRosters[year1,year2] clears the rosters of all teams from year1 to year2 and returns the total freed memory.  ClearRosters[yearlist] clears rosters from a list of years.  ClearRosters[] clears all rosters.";


(* ::Input::Initialization:: *)
DayOfYear::usage="DayOfYear[{year,month,day,hour,minute,second}] returns the numerical day of the year corresponding to the date provided.  Hour, minute and second are ignored.";


(* ::Input::Initialization:: *)
Divisions::usage="Divisons[year] returns a list of pairs {league,division}.  Prior to divisional play, 
the output is usually {{\"AL\",\"\"},{\"NL\",\"\"}}.";


(* ::Input::Initialization:: *)
DownloadAllEvents::usage="DownloadAllEvents[teamcode,year] downloads the \"AllEvents\" file for a team in  year from Retrosheet.   DownloadAllEvents[year] downloads files for all teams.   IMPORTANT:  year must be in EventFileYears and the TEAM(year) file must be present in the event file  directory for that league/year."; 


(* ::Input::Initialization:: *)
EndsInResultQ::usage="EndsInResultQ[game,result] is True if the final play of game is result.   EndsInResult[game,resultlist] is true if the final play is one of the results in resultlist.";


(* ::Input::Initialization:: *)
EventFileYears::usage="EventFileYears is the list of years for which event files are available.";


(* ::Input::Initialization:: *)
Events::usage="Events[teamcode,year] returns the list of events for for home games ofteamcode in year.";


(* ::Input::Initialization:: *)
EventsDate::usage="EventsDate[eventslist] returns the date in Mathematica format {year,month,day,0,0,0} for a list of game events.";


(* ::Input::Initialization:: *)
VisitingTeam::usage="VisitingTeam[game] returns the visiting team code for a retrogame or a game log line.";
HomeTeam::usage="HomeTeam[game] returns the home team code for a retrogame or a game log line.";


(* ::Input::Initialization:: *)
Statline::usage="Statline is the head of stat line sums.";


(* ::Input::Initialization:: *)
StatLineCats::usage="StatLineCats are headings for the formatting of stat lines.";


(* ::Input::Initialization:: *)
EnhancedStatLineCats::usage="EnhancedStatLineCats are headings for the formatting of enchanced stat lines.";


(* ::Input::Initialization:: *)
EnhancedStatLine::usage="EnhancedStatLine[statline] displays added statistics to a stat line.";


(* ::Input::Initialization:: *)
StatLineSum::usage="StatLineSum[statline-sequence] or StatLineSum[list of statlines] returns that sum of two or more statlines.";


(* ::Input::Initialization:: *)
RunningPlayQ::usage="RunningPlayQ[p_play] return True if p is not a batting play. INCLUDES some non-running plays such as wild pitchs or balks.";


(* ::Input::Initialization:: *)
Scored::usage="Scored[p_play] returns the number of runs scored as a result of play p. This will also wark on the sixth item in a play expression.";


(* ::Input::Initialization:: *)
Stats::usage="Stats[p_play] generates a statline for play p.";


(* ::Input::Initialization:: *)
HomeRuns::usage="HomeRuns[playercode,year] returns a list of the player's home runs in the year.  The option WithPitcher is passed to PlayerAtBats and can be used to determine whether the pitcher for each home run is listed.  HomeRuns[playercode] lists all home runs in the player's career that intersects event file years.\nHomeRuns[team,year] returns a list of home runs by team in year with format {game code, play}.\n  HomeRuns[game] returns a list of home runs in game.";


(* ::Input::Initialization:: *)
IPHomeRuns::usage="IPHomeRuns[team,year] returns a list of inside-the-park home runs by team in year with format {game code, play}.  IPHomeRuns[game] returns a list of inside-the-park home runs in game.";
Triples::usage="Triples[team,year] returns a list of triples by team in year with format {game code, play}.  Triples[game] returns a list of triples in game.";
Doubles::usage="Doubles[team,year] returns a list of doubles by team in year with format {game code, play}.  Doubles[game] returns a list of doubles in game.";
Singles::usage="Singles[team,year] returns a list of singles by team in year with format {game code, play}.  Singles[game] returns a list of singles in game.";


(* ::Input::Initialization:: *)
HomeRunQ::usage="HomeRunQ[play] is True if the play is a home run and False otherwise.  HomeRunQ[playstring] is same.";


(* ::Input::Initialization:: *)
MapThread[(#1::usage=#2;)&,{{SingleQ,DoubleQ,TripleQ,IPHomeRunQ},{"SingleQ[play] is True if the play is a single and False otherwise.  SingleQ[playstring] is same.",
"DoubleQ[play] is True if the play is a double and False otherwise.  DoubleQ[playstring] is same.",
"TripleQ[play] is True if the play is a triple and False otherwise.  TripleQ[playstring] is same.","IPHomeRunQ[play] is True if the play is a inside-the-park and False otherwise.  IPHomeRunQ[playstring] is same."}}];


(* ::Input::Initialization:: *)
FirstYearLastYear::usage="FirstYearLastYear[playercode] return a list of two years, the years of his first and last games.  Requires access to Retrosheet.org"


(* ::Input::Initialization:: *)
FromTeamCode::usage="FromTeamCode[code,year] name of the team with code in the given year.";


(* ::Input::Initialization:: *)
FromPlayerCode::usage="FromPlayerCode[playercode, teamcode, year] returns a formatted version of the roster entry for the playercode on team in year, normally the name of the player with that code.\n   FromPlayerCode[playercode,retrogame] returns the player's name in string form.\n  FromPlayerCode[playercode] either searches the file \"IDs.nb\" or goes online to Retrosheet to get the player name.";


(* ::Input::Initialization:: *)
GameDate::usage="GameDate[game] returns the date that a game was started using the format {year,month,day,0,0,0}, which is the standard format for Mathematica dates.  The argument to GameDate can be a retrogame or a line from a gamelog.";


(* ::Input::Initialization:: *)
GameLogs::usage="GameLogs[year] returns the list of game logs for year. If the argument provided is a string in "<>ToString[Postseason]<>", the collection of game logs of games in that catagory will be imported.";


(* ::Input::Initialization:: *)
GameLogData::usage="GameLogData[gameID] returns the line for the Game Logs corresponding to the gameID.  GameLogData[game] extracts the game ID from a retrogame and does the same.";


(* ::Input::Initialization:: *)
GameLogYears::usage="GameLogYears is the list of years for which game logs are available.";


(* ::Input::Initialization:: *)
GamesPlayedBy::usage="GamesPlayedBy[team,year] is a list of the game log lines for year played by team."


(* ::Input::Initialization:: *)
GamesOn::usage="GamesOn[{year,month,day}] returns a list of all retrogames played month/day/year.";


(* ::Input::Initialization:: *)
GamesWonByPitcher::usage="GamesWonByPitcher[gameset,pitcher] returns a list of games won by pitcher, identified by player ID.";


(* ::Input::Initialization:: *)
GamesLostByPitcher::usage="GamesLostByPitcher[gameset,pitcher] returns a list of games lost by pitcher, identified by player ID.";


(* ::Input::Initialization:: *)
HitSafelyQ::usage="HitSafely[player,game] is true if the player hit safely in the game and False he didn't.  Returns the string \"DNP\" if the player did not appear in the game.";


(* ::Input::Initialization:: *)
HitterAtBats::usage="HitterAtBats[playercode_,g_retrogame] returns a list of at-bats by a player in a game.  Each item in the list is a list with gamecode, play expression and pitcher.  OBSOLETE - no longer supported."


(* ::Input::Initialization:: *)
HomePlateUmpire::usage="HomePlateUmpire[g] returne the pair {umpire code,umpire name} for the home plate umpire in game g.";


(* ::Input::Initialization:: *)
ID::usage="ID[game] is the id value of the retrogame."


(* ::Input::Initialization:: *)
inning::usage="inning is the head of expressions generated by the Innings function, representing a half-inning of a retrogame.";
Innings::usage="Innings[game_retrogame] returns a list of inning records containing the plays, subs and comments that appear in each inning.";


(* ::Input::Initialization:: *)
InningsWithPitchers::usage="InningsWithPitchers[game_retrogame] returns a list of list where each sublist is the plays in a half-inning preceeded by the game ID and the playercode of the pitcher for that play.";


(* ::Input::Initialization:: *)
League::usage="League[game] returns the league in which a game was played, with \"IL\" for interleague games.";


(* ::Input::Initialization:: *)
Leagues::usage="Leagues[year] returns a list of the leagues operating in year.";


(* ::Input::Initialization:: *)
LineScores::usage="LineScores[game] returns the line score of runs in game as a 2 by k array for a k run game with visitors first, as usual.";


(* ::Input::Initialization:: *)
LoadBallParks::usage="LoadBallParks[] loads the ballpark data file.";


(* ::Input::Initialization:: *)
LoadGames::usage="LoadGames[filename] loads retrogames in filename.";


(* ::Input::Initialization:: *)
Loser::usage="Loser[game] returns the loser of game.";


(* ::Input::Initialization:: *)
LosingPitcher::usage="LosingPitcher[game] returns the player ID of the losing pitcher in game.";


(* ::Input::Initialization:: *)
Matchup::usage="Matchup[year_,pitcher_,pteam_,batter_,bteam_] returns a list of all plays in year in which the pitcher pitching for pteam pitched to batter playing for bteam.";


MyDateList::usage="MyDateList[\"m/d/y\"] returns the date string in standard Mathematica form.";


(* ::Input::Initialization:: *)
OffensiveStarter::usage="OffensiveStarter[retrogame,side,slot] returns the player in position slot of the batting order in the game described by retrogame. 0=visiting team and 1 = home team.";


(* ::Input::Initialization:: *)
BaseballPalette::usage="BaseballPalette[] creates a copy of the Master Baseball palette.";


(* ::Input::Initialization:: *)
YearPalette::usage="YearPalette[year] creates the palette for year  of MLB (currently only for Event File years.";


(* ::Input::Initialization:: *)
RosterPalette::usage="RosterPalette[team,year] creates the roster palette for team in year.   Buttons paste player codes.";


(* ::Input::Initialization:: *)
ParkHeads::usage ="ParkHeads is the list of headings in the ballpark data file.";


(* ::Input::Initialization:: *)
BallparkData::usage ="BallparkData is the list of ballpark data records.";


(* ::Input::Initialization:: *)
ParkAKA::usage = "ParkAKA[park_rec] returns the alternate names of a ballpark record.";
ParkCITY::usage = "ParkCity[park_rec] returns the city in which a ballpark is located.";
ParkEND::usage = "ParkAKA[park_rec] returns the ending date of a ballpark record record.";
ParkLEAGUE::usage = "ParkAKA[park_rec] returns the league of a ballpark record.";
ParkNAME::usage = "ParkAKA[park_rec] returns the name of a ballpark record.";
ParkNOTES::usage = "ParkAKA[park_rec] returns the alternate names of a ballpark record.";
ParkPARKID::usage = "ParkPARKID[park_rec] returns the park code for a ballpark record.";
ParkSTART::usage = "ParkAKA[park_rec] returns the starting date of a ballpark record.";
ParkSTATE::usage = "ParkSTATE[park_rec] returns the state in which a ballpark record is located.";



(* ::Input::Initialization:: *)
ParkRecord::usage="ParkRecord[pcode] returns the park data record corresponding with the code pcode.";
ParkName::usage="ParkName[pcode] returns the primary name of the park with code pcode.";
ParkID::usage="ParkID[pname] returns a list of park codes with names corresponding to the string pname.\nParkID[retrogame] returns the id of the park in which retrogame was played.";


(* ::Input::Initialization:: *)
Participants::usage="Participants[game_retrogame] is a list of two arrays, the first with visiting team participants and the second with home team participants.";


(* ::Input::Initialization:: *)
PitchCallTotals::usage="PitchCallTotals[g] returns a list {c,b,s}, where c is the number of called strikes in game g, b is the number of balls, and s is the number of pitches that were swung at.";


(* ::Input::Initialization:: *)
PitcherMap::usage="PitcherMap[game_retrogame] is a list of pitchers corresponding to each play in a game.  This is a technical function that is unlikely to be used directly.";


(* ::Input::Initialization:: *)
PitchersOfRecord::usage="PitchersOfRecord[game] returns a list of winning pitcher, losing pitcher, and (if applicable) game saver."


(* ::Input::Initialization:: *)
GameSave::usage="GameSave[game] returns  information on the pitcher who got the save in game in the form of {team, playercode,{0,0,1}."


(* ::Input::Initialization:: *)
PitchesInAnEvent::usage="PitchesInAnEvent[event] returns the number of actual pitches in event.  If the event is not a play, the number of pitches is zero.";


(* ::Input::Initialization:: *)
PlayerName::usage="PlayerName is the head of the expression returned by FromPlayerCode.";


(* ::Input::Initialization:: *)
Plays::usage="Plays[game,side] is a list of play events when side (0=visitors,1=home) is at bat in retrogame game.  Plays[game,teamcode] is the same provided the teamcode is one of the teams competing in game.";


(* ::Input::Initialization:: *)
PlayerCodeList::usage="PlayerCodeList[] is the list of all player codes matched with the player names in the form {playername,playercode}.";


(* ::Input::Initialization:: *)
PlayEvent::usage="PlayEvent[eventstring] returns a parsingthe last item in a play item into\n
 three parts:  {result,mods,advances}";


(* ::Input::Initialization:: *)
PositionDigits::usage="PositionDigits are the fielding position digits 1 through 9 in string form.";
RunningPlays::usage="RunningPlays is the list of play results that are not batting oriented.";


(* ::Input::Initialization:: *)
Postseason::usage="Postseason is a list of postseason catagories that can be used to import game logs";


(* ::Input::Initialization:: *)
Hits::usage="Hits is a list of results that are considered hits.";


(* ::Input::Initialization:: *)
NoAtBat::usage="NoAtBat are play results that are not considered at-bats, such as walks.";


(* ::Input::Initialization:: *)
PlayResults::usage="PlayResults is a list of strings that are currently picked out as play results" ;


(* ::Input::Initialization:: *)
PostSeasonEvents::usage="PostSeasonEvents[year] returns a list of all retrogames in year's postseason.";


(* ::Input::Initialization:: *)
Retrogame::usage="Retrogame[gamelog_line] returns the retrogame corresponding to the gamelog line, if the game is in EventFileYears.  Otherwise it returns an empty retrogame.";


(* ::Input::Initialization:: *)
Result::usage="Result[playstring] returns either \"Out\" or one of the strings from PlayResults, where playstring is the last argument of a play expression.   Result[playrec_play] returns the same.";


(* ::Input::Initialization:: *)
ResultQ::usage="ResultQ[result,play] returns true if the outcome of play equals result.   ResultQ[{result1,result2,...},play] is true if the outcome is any of the resulti.   Results are Single, Double, Triple, HomeRun or IPHomeRun." 


(* ::Input::Initialization:: *)
Roster::usage="Roster[teamcode,year] returns the contents of the roster file for team in year.";


(* ::Input::Initialization:: *)
RosterFilePresent::usage="RosterFilePresent[teamcode,year] determines if a team's roster file is available.";


(* ::Input::Initialization:: *)
SavingPitcher::usage="SavingPitcher[game] returns the player code for the pitcher who is awarded a save in game.  The input can be a line from a game log or a retrogame.  If no save is awarded, then the function returns and empty string";


(* ::Input::Initialization:: *)
SearchPlayer::usage="SearchPlayer[LastName, depth] searches for players and their teams using output form of TeamsPlayedFor in the Event File era  (1957 to present as of V2)  with hashing index up to depth, which defaults to 3.  This take time!";


(* ::Input::Initialization:: *)
SeasonPlot::usage="SeasonPlot[year,league] generates a day by day plot of the number of games above 0.500 each team in league stood during the year pennant race.  League codes:  AL, NL, FL, PL, AA, NA";


(* ::Input::Initialization:: *)
SelectGames::usage="SelectGames[year,condition] returns a list of games from year satisfying condition. To conserve memory, events from year are deleted from memory after the selection is made.  To keep games in memory: SelectGames[gamelist,condition] returns the retrogames in gamelist statisfying condition.";  


(* ::Input::Initialization:: *)
Standings::usage="Standings[gamelist] returns a matrix of standings from a list of games, gamelist.";


(* ::Input::Initialization:: *)
StartingBattingOrder::usage="StartingBattingOrder[retrogame,side] returns a list of player codes representing the starting line-up in the game described by retrogame.  side=0 is the visiting team, side=1 is the home team.  If the second argument is a string representing a team code of one of the teams in the game that team's batting order is returned.";


(* ::Input::Initialization:: *)
StartingPitchers::usage="StartingPitchers[game] return the player codes and names of the starting pitchers of a game."


(* ::Input::Initialization:: *)
TeamCodeList::usage="TeamCodeList[year] returns an array of team code data for year.";


(* ::Input::Initialization:: *)
TeamCodeListBasic::usage="TeamCodeListBasic[year] returns a list of team codes for year.";


(* ::Input::Initialization:: *)
TeamOfBatter::usage="TeamOfBatter[play,game] returns the team of the batter in the given play in a retrogame.  TeamOfBatter[play,gameID] does the same."


(* ::Input::Initialization:: *)
TeamOfPitcher::usage="TeamOfPitcher[play,game] returns the team of the pitcher in the given play in a retrogame.  TeamOfPitcher[play,gameID] does the same."


(* ::Input::Initialization:: *)
TeamRecord::usage="TeamRecord[team,gamelist] is a list {number of wins, number of losses} by a team (identified by team code) in a list of game log lines.";


(* ::Input::Initialization:: *)
Teams::usage="Teams[year] returns a list of teams in MLB in year in the form of list in a form such as\n 
{\"MIN\",\"WS1\",\"AL\",\"\",\"Washington\",\"Senators\",\"Nationals\",\"4/26/1901\",\"10/2/1960\",\"Washington\",\"DC\"}\n
Teams[year,league] returns a list of the teams in league in that year.\n
Teams[year,{league,division}] returns a list of the teams in the division.";


(* ::Input::Initialization:: *)
TeamsPlayedBy::usage="TeamsPlayedBy[teamcode,year] returns a list of teamcodes corresponding to the teams played by teamcode in year.";


(* ::Input::Initialization:: *)
TeamsPlayedFor::usage="TeamsPlayedBy[playercode,{year1,year2}] returns a list of years that the player corresponding to playercode played,with a list of teams for each year from year1 to year2.  TeamsPlayedBy[playercode] returns the same for all EventFile years.";


(* ::Input::Initialization:: *)
Temperature::usage="Temperature[game] returns the temperature for game, 0 if unknown.";


(* ::Input::Initialization:: *)
TemperaturePlot::usage="TemperaturePlot[team,year] returns the plot of the temperature in games played by a team in a given year.";


(* ::Input::Initialization:: *)
ToPlayerCode::usage="ToPlayerCode[\"First Last\"]  returns the most likely player code (lastf001) corresponding to the name string provided.  ToPlayerCode[\"First Last\",suffix_String] returns the code with the suffix provided.";


(* ::Input::Initialization:: *)
Winner::usage="Winner[game] returns the winner of game.";


(* ::Input::Initialization:: *)
WithPitchers::usage="WithPitchers is an option of PlayerAtBats.  If True, then the picher code is included with each at bat.";


(* ::Input::Initialization:: *)
WinningPercentage::usage="WinningPercentage[teamcode,year] returns the winning percentage for team in year.  Ties are not counted."


(* ::Input::Initialization:: *)
WinningPitcher::usage="WinningPitcher[game] returns the player ID of the winning pitcher in game.";


(* ::Input::Initialization:: *)
WorldSeriesYears::usage="WorldSeriesYears[] returns a list of years for which World Series Event files are available (locally).";


(* ::Input::Initialization:: *)
WorldSeries::usage="WorldSeries[year] returns a list of retrogames for World Series played in year.";


(* ::Input::Initialization:: *)
ALCSYears::usage="ALCSYears[] returns a list of years for which ALCS Event files are available (locally).";


(* ::Input::Initialization:: *)
ALCS::usage="ALCS[year] returns a list of retrogames for the ALCS in year.";


(* ::Input::Initialization:: *)
NLCSYears::usage="NLCSYears[] returns a list of years for which NLCS Event files are available (locally).";


(* ::Input::Initialization:: *)
NLCS::usage="NLCS[year] returns a list of retrogames for the NLCS in year.";


(* ::Input::Initialization:: *)
ALDSYears::usage="ALDSYears[] returns a list of years for which ALDS Event files are available (locally).";


(* ::Input::Initialization:: *)
ALDS::usage="ALDS[year] returns two lists of retrogames for the ALDS in year.";


(* ::Input::Initialization:: *)
NLDSYears::usage="NLDSYears[] returns a list of years for which NLDS Event files are available (locally).";


(* ::Input::Initialization:: *)
NLDS::usage="NLDS[year] returns two lists of retrogames for the NLDS in year.";


(* ::Input::Initialization:: *)
WildCardFiles::usage="WildCardFiles[] returns a list of wild card event files from the directory ef/allpost."


(* ::Input::Initialization:: *)
WildCard::usage="WildCard[league,year] returns a list of retrogames for wild card games played in league in year."


(* ::Input::Initialization:: *)
EventFile::"invalidyear"="No event file is available for the year `1`.";
FromPlayerCode::"badcode"="`1` is not the code for a player on `2` in `3`.";
FromPlayerCode::"invalidcode"="`1` is not a valid player code.";
GameLogs::"invalidyear"="No game logs exists for the year `1`.";
LoadBallParks::fail = "parkcode.txt missing";
TeamCode::"badcode"="Invalid team code: `1`.";
Roster::"missing"="Roster file for `1` missing.";
LineScores::"notavailable"="Line score not available for game requested.";
PitchesInAnEvent::"unknown"="Pitches in an at-bat not recorded/unknown.";
PlayerAtBats::"inactive"="`1` was inactive in `2`.";
Teams::"nodata"="No data for requested team/year/league/division";
LoadGames::"invalidfilename"="`1` not found";
NLDS::"None"="No NLDS games in `1`.";
NLCS::"None"="No NLCS games in `1`.";
ALCS::"None"="No ALCS games in `1`.";
ALDS::"None"="No ALDS games in `1`.";
WildCard::"None"="No wildcard games in `1`.";



(* ::Input::Initialization:: *)
Begin["`Private`"];


(* ::Input::Initialization:: *)
(* adopt this *)
RetrosheetDirectory[]="retrosheet";


(* ::Input::Initialization:: *)
OnLineQ[]:=OnLineQ[]=If[Import["http://retrosheet.org/home.htm","Hyperlinks"]=={},False, True,False]


(* ::Input::Initialization:: *)
DeQuote[fn_]:=Export[fn,StringReplace[Import[fn,"Text"],"\""->""],"CSV"];




(* ::Input::Initialization:: *)
RetrosheetEventYears= Join[{},Range[1945,2012]];


(* ::Input::Initialization:: *)
DownloadAllEvents[year_]:=Module[{dstring,was},was=Directory[];dstring=ToString[year]<>"eve";SetDirectory[HomeDirectory[]];SetDirectory[RetrosheetDirectory[]];SetDirectory["ef"];CreateDirectory[dstring];SetDirectory[dstring];Map[Save[#,#]&,Import["http://www.retrosheet.org/events/"<>ToString[year]<>"eve.zip"]];
SetDirectory[was]]


(* ::Input::Initialization:: *)

LoadBallParks[]:=
		(SetDirectory[HomeDirectory[]];
		 SetDirectory["retrosheet"];
	     {ParkHeads,BallparkData}=Import["parkcode.txt","CSV"]//{First[#],Rest[#]}&;);


(* ::Input::Initialization:: *)
LoadBallParks[];
Map[((#[[1]][record_List]:=record[[#[[2]]]])&),Transpose[{ToExpression["Park"<>#]&/@ParkHeads,Range[Length[ParkHeads]]}]];


(* ::Input::Initialization:: *)
ParkSTART[record_List]:=GameDate[record[[6]]];
ParkEND[record_List]:=GameDate[record[[7]]];
GameDate[""]={Infinity}//PadRight[#,6]&


(* ::Input::Initialization:: *)
ParkCITY[id_String]:=ParkCITY[ParkRecord[id]]
ParkSTATE[id_String]:=ParkSTATE[ParkRecord[id]]


(* ::Input::Initialization:: *)
ParkRecord[ID_String]:=First[Select[BallparkData,(First[#]==ID)&]//If[#=={},{Table["Bad Code",{9}]},#]&];



(* ::Input::Initialization:: *)
ParkName[ID_String]:=ParkNAME[ParkRecord[ID]]


(* ::Input::Initialization:: *)
ParkID[pname_String]:=Union[Select[BallparkData,(#[[2]]==pname)&],Select[BallparkData,(#[[3]]==pname)&]]//If[Length[#]==0,{},#//Transpose//First]&
ParkID[g_retrogame] := g /. {retrogame[__, info["site", id_], __] -> id};


(* ::Input::Initialization:: *)
BallPark[g_retrogame]:=GameLogData[g][[17]]
BallPark[g_List]:=g[[17]]


(* ::Input::Initialization:: *)
TeamsFile[]:="CurrentNames.csv"


(* ::Input::Initialization:: *)
teamDBHeadings={"Current franchise ID",
"Franchise ID (may the same as current one) for earlier data",
"League",
"Division (blank before divisional play)",
"Location name (e.g.Brooklyn,Texas)",
"Nickname",
"Alternate nicknames (blank if none for the period)",
"Date of the first game with this combination",
"Date of the last game with combination (blank if current one)",
"City",
"State"};


(* ::Input::Initialization:: *)
teamDB=Module[{cd=Directory[]},SetDirectory[HomeDirectory[]];SetDirectory["retrosheet"];Import[TeamsFile[]]//SortBy[#,First[MyDateList[#[[8]]]]&]&];


(* ::Input::Initialization:: *)
deblank=Characters[#]//.{{a___," ",b___}->{a,b}};


(* ::Input::Initialization:: *)
NoDataTest[result_]:=If[result!={},result,Message[Teams::nodata];result];
ActiveIn[line_,year_]:=MyDateList[line[[8]]][[1]]<= year&&(deblank[line[[9]]]=="" ||MyDateList[line[[9]]][[1]]>=year);


(* ::Input::Initialization:: *)
MyDateList[date_String]:=date//StringSplit[#,"/"]&//{#[[3]],#[[1]],#[[2]]}&//Map[ToExpression,#]&//PadRight[#,6]&;
MyDateList[""]={2999,12,31}//PadRight[#,6]&;


(* ::Input::Initialization:: *)
Teams[year_]:=Select[teamDB,ActiveIn[#,year]&]//NoDataTest;
Teams[year_,league_]:=Select[Teams[year],#[[3]]==league&]//NoDataTest;
Teams[year_,{league_,division_}]:=Select[Teams[year],#[[3]]==league&&#[[4]]==division&];


(* ::Input::Initialization:: *)
Divisions[year_]:=Union[Teams[year][[All,{3,4}]]]//NoDataTest;
Leagues[year_]:=Union[Teams[year][[All,3]]]//NoDataTest;


(* ::Input::Initialization:: *)
GameLogYears=Module[{ys},SetDirectory[HomeDirectory[]];SetDirectory["retrosheet/gl"];ys=FileNames["GL*.TXT"]//Map[Characters,#]&//(#/.{{"G","L",ys___,".","T","X","T"}:>ToExpression[StringJoin@@{ys}]})&//Select[#,NumberQ]&;SetDirectory[HomeDirectory[]];ys];


(* ::Input::Initialization:: *)
GameLogs[year_]:=GameLogs[year]=If[MemberQ[GameLogYears,year],Module[{},SetDirectory[HomeDirectory[]];SetDirectory["retrosheet/gl"];Import["GL"<>ToString[year]<>".TXT","CSV"]]//(SetDirectory[HomeDirectory[]];#)&,Message[GameLogs::"invalidyear",year];{}];


(* ::Input::Initialization:: *)
Postseason={"WC","DV","LC","WS","AS"};GameLogs[s_String]:=GameLogs[s]=If[MemberQ[Postseason,s],Module[{},SetDirectory[HomeDirectory[]];SetDirectory["retrosheet/gl"];Import["GL"<>ToString[s]<>".TXT","CSV"]]//(SetDirectory[HomeDirectory[]];#)&,Message[GameLogs::"invalidyear",s];{}];


(* ::Input::Initialization:: *)
Winner[game_]:=If[game[[10]]>game[[11]],game[[4]],If[game[[10]]<game[[11]],game[[7]]],"ND"];
Loser[game_]:=If[game[[10]]<game[[11]],game[[4]],If[game[[10]]>game[[11]],game[[7]]],"ND"];



(* ::Input::Initialization:: *)
PitchersOfRecord[game_retrogame]:=Module[{gamelog},gamelog=ID[game]//GameLogData;If[Winner[gamelog]=!=Null,PitchersOfRecord[gamelog],{{None,None,{0,0,0}}}]];


(* ::Input::Initialization:: *)
PitchersOfRecord[gamelog_List]:={{Winner[gamelog],gamelog[[94]],{1,0,0}},{Loser[gamelog],gamelog[[96]],{0,1,0}}}//If[StringLength[gamelog[[98]]]>4,Append[#,{Winner[gamelog],gamelog[[98]],{0,0,1}}],#]&


(* ::Input::Initialization:: *)
GameSave[game_retrogame]:=Cases[game,info["save",_]]//If[StringLength[First[#][[2]]]<4,{},{Winner[game],First[#][[2]],{0,0,1}}]&;


(* ::Input::Initialization:: *)
GamesPlayedBy[teamcode_,year_]:=Select[GameLogs[year],((VisitingTeam[#]==teamcode)||(HomeTeam[#]==teamcode))&]


(* ::Input::Initialization:: *)
TeamRecord[teamcode_,gamelist_]:=Standings[gamelist]//Select[#,(First[#]===teamcode)&]&//First//Rest


(* ::Input::Initialization:: *)
HomeTeam[game_List]:=game[[7]];


(* ::Input::Initialization:: *)
VisitingTeam[game_List]:=game[[4]];


(* ::Input::Initialization:: *)
Standings[gameset_]:=Module[{teams,results},teams=Union@@Take[Transpose[gameset],{4,7,3}];results=Map[{Winner[#],Loser[#]}&,gameset]//Transpose;Map[{#,Count[results[[1]],#],Count[results[[2]],#]}&,teams]//Sort[#,(#1[[2]]/(#1[[2]]+#1[[3]])>=#2[[2]]/(#2[[2]]+#2[[3]]))&]&]


(* ::Input::Initialization:: *)
lnscore[linestring_String]:=((Characters[linestring]/.{"x"->"I"}))//(#//.{{pre___,"(",digits__,")",post___}:>{pre,StringJoin[digits],post}})&//Map[ToExpression,#]&;


(* ::Input::Initialization:: *)
LineScores[game_List]:=If[IntegerQ[game[[12]]],Module[{rawlists,innings,outs=game[[12]]},innings=Quotient[outs,6]+If[Mod[outs,6]==0,0,1];rawlists=lnscore/@{ToString[game[[20]]],ToString[game[[21]]]};PadLeft[#,innings]&/@rawlists],Message[LineScores::"notavailable"];Table["-",{9}]//{#,#}&];


(* ::Input::Initialization:: *)
League[game_]:=If[game[[5]]==game[[8]],game[[5]],"IL","NA"];


(* ::Input::Initialization:: *)
GameDate[date_String]:=Characters[date]//{Take[#,{7,10}],Take[#,{1,2}],Take[#,{4,5}]}&//Map[ToExpression[StringJoin@@#]&,#]&//PadRight[#,6]&


(* ::Input::Initialization:: *)
GameDate[game_retrogame]:=ID[game]//Characters//{Take[#,{4,7}],Take[#,{8,9}],Take[#,{10,11}]}&//Map[ToExpression[StringJoin@@#]&,#]&//PadRight[#,6]&


(* ::Input::Initialization:: *)
GameDate[game_List]:=game[[1]]//ToString//Characters//{Take[#,4],Take[#,{5,6}],Take[#,-2]}&//Map[ToExpression[StringJoin@@#]&,#]&//PadRight[#,6]&


(* ::Input::Initialization:: *)
Retrogame[GameLogLine_List]:=Module[{y},If[MemberQ[EventFileYears,y=First[GameDate[GameLogLine]]],AllEvents[GameLogLine[[7]],y][[GameLogLine[[9]]]],Message[EventFile::"invalidyear",y];retrogame[]]]


(* ::Input::Initialization:: *)
SavingPitcher[game_]:=game[[98]];


(* ::Input::Initialization:: *)
StartingBattingOrder[game_List,side_?IntegerQ]:=If[Mod[side,2]==0,Take[game,{106,132}]//Partition[#,3]&//Transpose//Take[#,2]&,Take[game,{133,159}]//Partition[#,3]&//Transpose//Take[#,2]&]//Transpose;



(* ::Input::Initialization:: *)
StartingBattingOrder[game_List,teamcode_String]:=Which[VisitingTeam[game]==teamcode,StartingBattingOrder[game,0],HomeTeam[game]==teamcode,StartingBattingOrder[game,1],True,Message[TeamCode::"badcode",teamcode];{}];


(* ::Input::Initialization:: *)
BasicScoreboard[game_]:={{Take[GameDate[game],3],ParkName[game[[17]]],ParkCITY[ParkRecord[game[[17]] ]],ParkSTATE[ParkRecord[game[[17]]]]},{game[[4]],game[[10]],game[[23]],game[[46]]},{game[[7]],game[[11]],game[[51]],game[[74]]}}


(* ::Input::Initialization:: *)
WinningPitcher[game_]:=game[[94]];


(* ::Input::Initialization:: *)
GamesWonByPitcher[gameset_,playerID_]:=Select[gameset,WinningPitcher[#]==playerID&]


(* ::Input::Initialization:: *)
LosingPitcher[game_]:=game[[96]];


(* ::Input::Initialization:: *)
GamesLostByPitcher[gameset_,playerID_]:=Select[gameset,LosingPitcher[#]==playerID&]


(* ::Input::Initialization:: *)
WinningPercentage[teamcode_,year_]:=Standings[GameLogs[year]]//Select[#,First[#]==teamcode&]&//First//(#[[2]]/(#[[2]]+#[[3]]))&//N//NumberForm[#,3]&;


(* ::Input::Initialization:: *)
SeasonPlot[games_List,teams_List,label_String]:=Module[{start,startIn,seasonlist,teamnumber,MakeLists,monthnumbers,lists,allteams,listsIn,nick,oset=7},allteams=Union[games[[All,4]],games[[All,7]]];(* Adjust early league codes by one letter *)
start=((Append[{#},{0}]&)/@#1&)[allteams];nick=Map[Rule[#[[2]],#[[5]]<>" "<>#[[6]]]&,teams];
((teamnumber[allteams[[#1]]]=#1)&)/@Range[Length[allteams]];seasonlist=SortBy[games,GameDate]//Split[#,(GameDate[#1][[3]]==GameDate[#2][[3]])&]&;monthnumbers=Map[DayOfYear[GameDate[First[#]]]&,seasonlist]//Prepend[#,First[#]-1]&;
MakeLists[monthlist_]:=(start=Map[(#/.{{p__,{q___,s_}}:>{p,{q,s,s}}})&,start];(If[MemberQ[allteams,Winner[#1]],start[[teamnumber[Winner[#1]],-1,-1]]+=1];If[MemberQ[allteams,Loser[#1]],start[[teamnumber[Loser[#1]],-1,-1]]-=1])&/@monthlist);MakeLists/@seasonlist;start=Sort[start,Last[Last[#1]]>=Last[Last[#2]]&];
startIn=Select[start,MemberQ[teams[[All,2]],#[[1]]]&]/.nick;
lists=Map[Transpose[{monthnumbers,#}]&,Last[Transpose[startIn]]];
ListPlot[lists,Joined->True,PlotRange->{{First[monthnumbers],Last[monthnumbers]+40},All},PlotStyle->({Thickness[0.003],Hue[1-#1/Length[startIn]]}&/@Range[Length[startIn]]),Ticks->{monthnumbers//First[Transpose[Partition[#,30]]]&,Automatic},PlotLabel->label,ImageSize->{800.,Automatic},AxesOrigin->{Last[monthnumbers]+2,0},PlotRange->All,Prolog->Map[{Hue[1-#1/Length[startIn]],Rectangle[{Last[monthnumbers]+5+oset Mod[2+#,3],Last[Last[startIn[[#]]]]}-1,{Last[monthnumbers]+5+oset Mod[2+#,3],Last[Last[startIn[[#]]]]}+1],Black,Text[First[startIn[[#]]],{Last[monthnumbers]+15+oset Mod[2+#,3],Last[Last[startIn[[#]]]]}]}&,Range[Length[startIn]]]]];
SeasonPlot[year_,league_]:=SeasonPlot[GameLogs[year],Teams[year,league],ToString[year]<>" "<>league<>" pennant race"];
SeasonPlot[year_,{league_,division_}]:=SeasonPlot[GameLogs[year],Teams[year,{league,division}],ToString[year]<>" "<>league<>" "<>division<>" pennant race"];


(* ::Input::Initialization:: *)



(* ::Input::Initialization:: *)
ToPlayerCode[name_String,suffix_:"001"]:=((name//Characters)/.{{f_,fr___," ",last__}:>(({last}//PadRight[#,4,"-"]&//(StringJoin@@#)&//ToLowerCase))<>ToLowerCase[f]<>suffix})


(* ::Input::Initialization:: *)
Format[PlayerName[coderecord_]]:=coderecord[[3]]<>" "<>coderecord[[2]];


(* ::Input::Initialization:: *)
Off[\!\(TraditionalForm\`FetchURL::conopen\)];Off[StringSplit::strse];(*  Disable online FromPlayerCode FromPlayerCode[code_String]:=FromPlayerCode[code]=Module[{name},name=Import["http://www.retrosheet.org/boxesetc/"<>StringTake[code,1]<>"/P"<>code<>".htm"]//StringSplit[#,"\n"]&//#[[15]]&;If[name===$Failed,Message[FromPlayerCode::"invalidcode",code];code,name]]
*)


(* ::Input::Initialization:: *)
SetDirectory[HomeDirectory[]];
SetDirectory["retrosheet"];
If[MemberQ[FileNames[],"IDs.nb"],OpenRead["IDs.nb"];
PlayerCodeList[]=Read["IDs.nb"]];
Close["IDs.nb"];SetDirectory[HomeDirectory[]];


(* ::Input::Initialization:: *)
FromPlayerCode[code_String]:=Select[PlayerCodeList[],#[[1]]==code&]//If[#=={},Message[FromPlayerCode::"invalidcode",code];{code,code,""},{code,#[[1,2]],#[[1,3]]}]&//PlayerName;


(* ::Input::Initialization:: *)
FromPlayerCode[playercode_,teamcode_,year_]:=Select[Roster[teamcode,year],MemberQ[#,playercode]&]//If[#==={},Message[FromPlayerCode::"badcode",playercode,teamcode,year];{playercode,playercode,""},{playercode,First[#][[2]],First[#][[3]]}]&//PlayerName


(* ::Input::Initialization:: *)
FromPlayerCode[playercode_,game_retrogame]:=FromPlayerCode[playercode];


(* ::Input::Initialization:: *)
SearchPlayer[lastname_,depth_:3]:=Module[{ln},ln=lastname//Characters//PadRight[#,4,"-"]&//StringJoin;Outer[TeamsPlayedFor[StringTake[ToLowerCase[ln],4]<>FromCharacterCode[#1]<>ToString[#2]<>"0"<>ToString[#3]]&,Range[97,97+25],Range[0,1],Range[1,depth]]//Flatten[#,2]&//Select[#,#[[2,1,1]]=!=0&]&]


(* ::Input::Initialization:: *)
TeamsPlayedFor[playercode_,yearlist_List]:=Module[{y,haveyears,teamlist},haveyears=Intersection[EventFileYears,yearlist];teamlist=Map[(y=#;Select[TeamCodeList[y]//Transpose//First,MemberQ[Roster[#,y],playercode,2]&]//{y,#}&)&,haveyears]//Select[#,(Last[#]=!={})&]&;If[teamlist=={},{{playercode,playercode},{{0,"Player not active"}}},{{playercode,FromPlayerCode[playercode,teamlist//First//Last//First,teamlist//First//First]},teamlist}]];

TeamsPlayedFor[playercode_]:=TeamsPlayedFor[playercode,FirstYearLastYear[playercode]];

TeamsPlayedFor[playercode_,{year1_,year2_}]:=TeamsPlayedFor[playercode,Range[year1,year2]]


(* ::Input::Initialization:: *)
FirstYearLastYear[code_String]:=Module[{name,p},name=Import["http://www.retrosheet.org/boxesetc/"<>StringTake[code,1]<>"/P"<>code<>".htm"];If[name===$Failed,"bad code",p=name//StringSplit[#,"\n"]&//Select[#,StringMatchQ[#,"First Game*"]&]&//First//StringCases[#,", "~~_ ~~_ ~~_ ~~_ ]&//Map[ToExpression[StringTake[#,-4]]&,#]&];If[Length[p]==2,p,Append[p,Last[EventFileYears]]]];


(* ::Input::Initialization:: *)
HomePlateUmpire[g_retrogame]:=Take[GameLogData[g],{78,79}]
HomePlateUmpire[g_List]:=Take[g,{78,79}]


(* ::Input::Initialization:: *)
processseries[eventsequence_]:=(eventsequence//Map[Reverse,Split[Reverse[#],(First[#]=!="id")&]]&//Reverse//Select[#,Length[#]>50&]&//Map[processgame,#]&);
processline=(ToExpression[First[#]][Sequence@@Rest[#]])&;
processgame[eventsequence_]:=retrogame[Sequence@@Map[processline,eventsequence]]//Select[#,Head[#]=!=Null&]&;makenumeric[item_]:=Map[Module[{s},If[NumberQ[s=ToExpression[#]],s,#]]&,item];


(* ::Input::Initialization:: *)
Format[retrogame[pre__,info["visteam",vt_String],q1___,info["hometeam",ht_String],q2___,info["date",ds_String],post___]]:=vt <>" @ "<>ht<>" on "<>ds;


(* ::Input::Initialization:: *)
EventFileYears=Module[{ys,a,b,c,d,e,f},SetDirectory[HomeDirectory[]];SetDirectory[RetrosheetDirectory[]];SetDirectory["ef"];Union[FileNames["18*"],FileNames["19*"],FileNames["20*"]]//Map[Characters,#]&//(#/.{{a_,b_,c_,d_,e_,f_,g_}:>ToExpression[StringJoin[a,b,c,d]]})&]//Select[#,IntegerQ]&;


(* ::Input::Initialization:: *)
If[OnLineQ[],DownloadAllEvents/@Complement[RetrosheetEventYears,EventFileYears]];


(* ::Input::Initialization:: *)
AllEvents[year_]:=AllEvents[year]=If[MemberQ[EventFileYears,year],Module[{dstring},dstring=ToString[year]<>"eve";SetDirectory[HomeDirectory[]];SetDirectory[RetrosheetDirectory[]];SetDirectory["ef"];SetDirectory[dstring];Map[Select[Import[ToString[year]<>#[[1]]<>".EV"<>#[[2]],"CSV"],(First[#]=!="com")&]&,Import["TEAM"<>ToString[year],"CSV"]]]//Map[processseries,#]&//Join@@#&//SortBy[#,GameDate]&,Message[EventFile::"invalidyear",year]];



(* ::Input::Initialization:: *)
Events[teamcode_,year_]:=Events[teamcode,year]=If[MemberQ[EventFileYears,year],Module[{dstring,ls},dstring=ToString[year]<>"eve";SetDirectory[HomeDirectory[]];SetDirectory[RetrosheetDirectory[]];SetDirectory["ef"];SetDirectory[dstring];ls=Import["TEAM"<>ToString[year],"CSV"]//Select[#,#[[1]]==teamcode&]&//First//StringTake[#[[2]],1]&;Select[Import[ToString[year]<>teamcode<>".EV"<>ls,"CSV"],First[#]=!="com"&]//processseries],Message[EventFile::"invalidyear",year]];



(* ::Input::Initialization:: *)
alleventsPositions[teamcode_,year_]:=alleventsPositions[teamcode,year]=Flatten[Union[Position[AllEvents[year],retrogame[pre___,info["visteam",teamcode],post___]],Position[AllEvents[year],retrogame[pre___,info["hometeam",teamcode],post___]]]]


(* ::Input::Initialization:: *)
AllEvents[teamcode_,year_]:=AllEvents[year][[alleventsPositions[teamcode,year]]]


(* ::Input::Initialization:: *)
(*  Not finished: *)AllEventsDownLoadedQ[]:=AllEventsDownloadedQ[]=If[Input["Have you downloaded AllEventFile"]=="Yes",Null,Null];


(* ::Input::Initialization:: *)
PostSeasonEvents[year_]:=Module[{},SetDirectory[HomeDirectory[]];SetDirectory[RetrosheetDirectory[]];SetDirectory["post"];Select[FileNames[],StringMatchQ[#,ToString[year]<>"*"<>".EVE"]&]]


(* ::Input::Initialization:: *)
LoadGames[filename_String]:=If[MemberQ[FileNames[],filename],Import[filename,"CSV"]//Map[Reverse,Split[Reverse[#],(First[#]=!="id")&]]&//Reverse//Select[#,Length[#]>50&]&//Map[processgame,#]&,Message[LoadGames::"invalidfilename",filename];{}];



(* ::Input::Initialization:: *)
BasicScoreboard[game_retrogame]:=BasicScoreboard[GameLogData[game]];


(* ::Input::Initialization:: *)
DayOfYear[{year_,month_,day_,rest___}]:=1+(AbsoluteTime[{year,month,day,0,0,0}]-AbsoluteTime[{year,1,1,0,0,0}])/(60 60 24)


(* ::Input::Initialization:: *)
(* I am counting an intentional ball (i) is a pitch - should I? *)
ActualPitchCodes=Characters["bcfhiklmopqrstuxyBCFHIKLMOPQRSTUXY"];


(* ::Input::Initialization:: *)
FromTeamCode[code_,year_:0]:=If[year>0,Select[TeamCodeList[year],First[#]==code&]//If[#=={},code,StringJoin@@{First[#][[3]]," ",First[#][[4]]}]&,code];


(* ::Input::Initialization:: *)
GameDate[game_retrogame]:=Select[game,(Head[#]==id)&]//First//Last//Characters//{Take[#1,{4,7}],Take[#1,{8,9}],Take[#1,{10,11}]}&//Map[ToExpression[StringJoin@@#]&,#]&//Join[#,{0,0,0}]&


(* ::Input::Initialization:: *)
GameLogData[game_retrogame]:=GameLogData[ID[game]];


(* ::Input::Initialization:: *)
GameLogData[gameid_String]:=If[StringPart[gameid,3]!="-",GameLogs[Take[Characters[gameid],{4,7}]//(StringJoin@@#)&//ToExpression]//Select[#,((#[[1]]==ToExpression[StringJoin[Take[Characters[gameid],{4,11}]]])&&(#[[2]]==ToExpression[Characters[gameid][[12]]])&&(#[[7]]==StringJoin[Take[Characters[gameid],{1,3}]]))&]&//First,
GameLogData[gameid,StringTake[gameid,2]]];


(* ::Input::Initialization:: *)
GameLogData[gameid_String,post_]:=Module[{oid},oid=StringDrop[gameid,3];GameLogs[post]//Select[#,((#[[1]]==ToExpression[StringJoin[Take[Characters[oid],{4,11}]]])&&(#[[2]]==ToExpression[Characters[oid][[12]]])&&(#[[7]]==StringJoin[Take[Characters[oid],{1,3}]]))&]&//First];


(* ::Input::Initialization:: *)
HitSafelyQ[playercode_,game_retrogame]:=PlayerAtBats[playercode,game]//If[#=={},"DNP",If[Intersection[Map[Result[#[[2]]]&,#],Hits]=!={},True,False]]&;


(* ::Input::Initialization:: *)
HomeRuns[playercode_String/;StringLength[playercode]>3,year_,opts___]:=Select[PlayerAtBats[playercode,year,opts],MemberQ[{"H","HR","HR$","H$"},Result[#[[2]]]]&];


(* ::Input::Initialization:: *)

HomeRuns[playercode__String/;StringLength[playercode]>3,opts___]:=Map[HomeRuns[playercode,#,opts]&,Intersection[Range@@FirstYearLastYear[playercode],EventFileYears]];



(* ::Input::Initialization:: *)
ID[game_retrogame]:=game[[1,1]];


(* ::Input::Initialization:: *)
Innings[game_retrogame]:=List@@(Select[game,MemberQ[{play,sub},Head[#]]&]//Split[#,((Head[#1]=!=play)||(Head[#2]=!=play))||(#1[[2]]==#2[[2]])&]&//Map[inning@@#&,#]&)


(* ::Input::Initialization:: *)
LineScores[game_retrogame]:=LineScores[GameLogData[ID[game]]];


(* ::Input::Initialization:: *)
StartingPitchers[game_retrogame]:=(GameLogData[game][[#]]&/@{ 102,103,104,105})//Partition[#,2]&


(* ::Input::Initialization:: *)
PitcherMap[game_retrogame]:=Module[{p},{p[1],p[0]}=StartingPitchers[game]//Transpose//First;Innings[game]/.{play[in_,side_,d___]:>p[side],com[inf___]->"np",sub[pcode_,pname_,side_,batord_,1]:>(p[1-side]=pcode;"np"),sub[dat___]:>"np"}]


(* ::Input::Initialization:: *)
InningsWithPitchers[game_retrogame]:=({Innings[game],PitcherMap[game]}//Transpose)/.{{inning[ps__],inning[pls__]}->{{ps},{pls}}}//Map[Transpose,#]&//Map[Prepend[#,ID[game]]&,#,{2}]&


(* ::Input::Initialization:: *)
peek=(Print[#1];#1)&


(* ::Input::Initialization:: *)
Options[PlayerAtBats]={WithPitchers->False};PlayerAtBats[playercode_,game_retrogame,opts___]:=Module[{results,pq},pq=WithPitchers/.Join[{opts},Options[PlayerAtBats]];If[pq,results=Join@@InningsWithPitchers[game];Select[results,(MemberQ[#[[2]],playercode]&&(Result[#[[2]]]=!="NP")&&(Head[#[[2]]]==play))&],Select[List@@game,Head[#]==play&&MemberQ[#,playercode]&&Result[#]=!="NP"&]//Map[{ID[game],#}&,#]&]];


(* ::Input::Initialization:: *)
PlayerAtBats[playercode_,year_,opts___]:=Module[{teams,tl},teams=TeamsPlayedFor[playercode,{year,year}];tl =If[(teams//Last//First//First)==0,Message[PlayerAtBats::inactive,playercode,year];{},teams//Last//First//Last];{teams,tl};Join@@(PlayerAtBats[playercode,#,opts]&/@Join@@Map[(List@@AllEvents[#,year])&,tl])];


(* ::Input::Initialization:: *)
Matchup[year_,pitcher_,pteam_,batter_,bteam_]:=Select[AllEvents[pteam,year],(MemberQ[#,batter,2]&&MemberQ[#,pitcher,2])&]//Map[InningsWithPitchers[#]&,#]&//Flatten[#,2]&//Select[#,(Head[#[[2]]]==play)&]&//Select[#,((#[[3]]==pitcher)&&(#[[2,3]]==batter))&] &


(* ::Input::Initialization:: *)
OffensiveStarter[game_retrogame,side_,slot_]:=StartingBattingOrder[game,side][[slot]];


(* ::Input::Initialization:: *)
PitchesInAnEvent[event_play]:=Which[Result[event]=="NP",0,Characters[event[5]]==={},Message[PitchesInAnEvent::"unknown"];0,True,(Select[Characters[event[[5]]],MemberQ[ActualPitchCodes,#]&]//Length)];


(* ::Input::Initialization:: *)
HitterAtBats[playercode_,g_retrogame]:=Select[InningsWithPitchers[g]//Flatten[#,1]&,((#[[2,3]]==playercode)&&AtBatQ[#[[2]]])&];


(* ::Input::Initialization:: *)
PitchesInAnEvent[event_]:=0


(* ::Input::Initialization:: *)
Plays[game_retrogame,side_?IntegerQ]:=Select[List@@game,(Head[#]==play)&]//Select[#,(#[[2]]==side)&]&


(* ::Input::Initialization:: *)
Plays[game_retrogame,teamcode_String]:=
Which[VisitingTeam[game]==teamcode,Plays[game,0],HomeTeam[game]==teamcode,Plays[game,1],True,"bad code"]


(* ::Input::Initialization:: *)
TeamOfBatter[p_play,id_String]:=Which[p[[2]]==0,VisitingTeam[GameLogData[id]],p[[2]]==1,HomeTeam[GameLogData[id]],True,"N/A"]


(* ::Input::Initialization:: *)
TeamOfBatter[p_play,g_retrogame]:=Which[p[[2]]==0,VisitingTeam[g],p[[2]]==1,HomeTeam[g],True,"N/A"]


(* ::Input::Initialization:: *)
TeamOfPitcher[p_play,id_String]:=Which[p[[2]]==1,VisitingTeam[GameLogData[id]],p[[2]]==0,HomeTeam[GameLogData[id]],True,"N/A"]


(* ::Input::Initialization:: *)
TeamOfPitcher[p_play,g_retrogame]:=Which[p[[2]]==1,VisitingTeam[g],p[[2]]==0,HomeTeam[g],True,"N/A"]


(* ::Input::Initialization:: *)

PitchCalls[g_retrogame]:=g//Select[#,Head[#]==play&]&//List@@#&//(#/.{play->List})&//Select[#,#[[6]]!="NP"&&Not[NumberQ[#[[5]]]]&]&//Transpose//#[[5]]&//StringJoin@@#&;


(* ::Input::Initialization:: *)
PitchCallTotals[g_retrogame]:=Module[{st,bl,sw,p},st={"c","C"};bl={"b","B"};sw=Join[Characters["flmoqrstxy"],Characters[FromCharacterCode[ToCharacterCode["flmoqrstxy"]-32]]];p=Characters[PitchCalls[g]];{Length[Select[p,MemberQ[st,#]&]],Length[Select[p,MemberQ[bl,#]&]],Length[Select[p,MemberQ[sw,#]&]]}]


(* ::Input::Initialization:: *)
PositionDigits=ToString/@Range[9];RunningPlays={"BK","CS","DI","OA","PB","WP","PO","POCS","NP","SB"}//Sort[#,Length[Characters[#]]>=Length[Characters[#2]]&]&;
AtBats=Join["E"<>#&/@PositionDigits];
Hits={"DGR","HR7","HR8","HR9","H7","H8","H9","HR","S","D","T","H"};
NoAtBat={"W","IW","I","HP","SF","SH"}//Sort[#,Length[Characters[#]]>=Length[Characters[#2]]&]&;
AtBatQ[p_play]:=Not[MemberQ[Join[RunningPlays,NoAtBat],Result[p]]]


(* ::Input::Initialization:: *)
PlayEvent[k_?NumberQ]:=PlayEvent[ToString[k]];PlayEvent[evs_String]:=Module[{ev,case,result,rest,mods,advances,comment},
ev=StringReplace[evs,{"?"->"","!"->"","#"->""}];case=Intersection[Characters[ev],{"/","."}]//Sort;Which[case=={},{result,mods,advances}={ev,{},""},case=={"."},{result,advances}=StringSplit[ev,{"."}];mods={},case=={"/"},StringSplit[ev,{"/"}]//{result=First[#];mods=Rest[#]}&;advances="",case=={".","/"},{rest,advances}=StringSplit[ev,{"."}];StringSplit[rest,{"/"}]//{result=First[#];mods=Rest[#]}&];
{result,mods,advances}]


(* ::Input::Initialization:: *)
PlayResults=Join[Hits,NoAtBat,AtBats,RunningPlays]//Sort[#,Length[Characters[#]]>=Length[Characters[#2]]&]&;


(* ::Input::Initialization:: *)
StatLineCats={"AB","R","H","2B","3B","HR","RBI","BB","IBB","SO","HBP","SH","SF","XI","ROE","GDP","SB","CS"};


(* ::Input::Initialization:: *)
Format[Statline[l_List]]:=TableForm[{StatLineCats,l},TableSpacing->{1, 1}]


(* ::Input::Initialization:: *)
EnhancedStatLineCats = Join[StatLineCats, {"BA", "OBP", "SLG","OPS"}];


(* ::Input::Initialization:: *)
EnhancedStatLine[Statline[s_]]:=EStatline[Join[s,{N[s[[3]]/s[[1]],3],N[(s[[3]]+s[[8]]+s[[11]])/(s[[1]]+s[[8]]+s[[11]]+s[[13]]),3],N[(s[[3]]+s[[4]]+2*s[[5]]+3*s[[6]])/s[[1]],3]}]//Append[#,N[#[[-1]]+#[[-2]],3]]&]


(* ::Input::Initialization:: *)
Format[EStatline[l_List]]:=TableForm[{EnhancedStatLineCats,l},TableSpacing->{1, 1}]


(* ::Input::Initialization:: *)
StatLineSum[statlines___]:=Total[Map[List@@#&,{statlines}]]//Statline@@#&
StatLineSum[statlineslist_List]:=Total[Map[List@@#&,statlineslist]]//Statline@@#&


(* ::Input::Initialization:: *)
RunningPlayQ[playitem_play]:=Module[{oc},oc=PlayEvent[playitem[[6]]][[1]];StringMatchQ[oc,"PO*"]||StringMatchQ[oc,"CS*"]||StringMatchQ[oc,"SB*"]||StringMatchQ[oc,"FLE*"]||MemberQ[{"NP","BK","CS2(24)","CS2(26)","CS2(2E4)","CS3(215)","CS3(25)","CSH(25)","DI","FLE2","FLE3","FLE4","FLE5","OA","PB","PO1(13)","PO1(23)","PO1(E1)","PO1(E2)","PO2(16)","PO2(E1)","PO2(E4)","PO3(E2)","POCS2(13)","POCS2(134164)","POCS2(136)","POCS2(14)","POCS2(1E3)","SB2","SB3","SB3;SB2","SBH;SB2","WP",Sequence@@(Map["FLE"<>#&,Characters["123456789"]]),"CS2(23)","CSH(251)","PO1(E3)","POCS2(1363)","POCS2(13634)","POCS2(1365)","POCS3(1)","POCS3(15)","CS2(236)","CS2(243)","CS2(2436)","CS2(263)","CSH(2)","CSH(2E5)","PO1(24)","PO2(26)","PO2(E2)","POCS2(134)","POCS2(1361)","POCS2(16)","POCS3(154)","POCS3(156)","CS2(15)","CS3(2E5)","CSH(252)","CSH(262)","POCS2(143)","POCS2(26E3)","CS2(136)","CS2(1363)","CS2(2636)","PO2(14)","CS2(2434)","CS2(25)","CS2(25)","CS3(15)","CSH(12)","CSH(25251)","PO3(25)","POCS3(265)","POCSH(2526)","CS2(13)","CS2(13624)","CS2(14)","CS2(143)","CS2(1436)","CS2(154)","CS2(16)","CS2(2)","CS2(2434)","CS2(24342)","CS2(24364)","CS2(2634)","CS2(26341)","CS3(1)","CS3(15)","CS3(15)","CS3(15)","CS3(154)","CS3(1546)","CS3(1561)","CS3(16)","CS3(26)","CSH(12)","CSH(1342)","CSH(135)","CSH(23432)","CSH(2425)","CSH(2525)","CSH(2526)","CSH(253)","PO1(1E3)","PO1(1E3)","PO1(E1","PO2(24)","PO2(E2","PO2(E2","PO3(25)","PO3(E1)","POCS2(1341)","POCS2(1343)","POCS2(135)","POCS2(13614)","POCS2(136146)","POCS2(1362)","POCS2(136346)","POCS2(13E6)","POCS2(13E6)","POCS2(1436)","POCS2(16341)","POCS2(23)","POCS2(234)","POCS2(2341)","POCS2(236)","POCS3(145)","POCS3(16)","POCS3(165)","POCS3(1E4)","POCS3(1E6)","POCS3(265)","POCS3(265)","POCS3(265)","POCS3(2654)","POCS3(E1)","POCSH(251)","SB2;SB3","SBH","SBH(UR)","SBH(UR);SB2","CS2(163)","CS2(24361)","CS2(263461)","CS2(2E6)","CS3(1545)","CS3(156)","CS3(254)","CSH(132)","CSH(13425)","CSH(134526)","CSH(1362)","CSH(142)","CSH(143251)","CSH(162)","CSH(1652)","CSH(242)","CSH(242)","CSH(24254)","CSH(245)","PO2(E6)","PO2(E6)","PO3(15)","PO3(E2","PO3(E2","PO3(E2","PO3(E2","POCS2(134132)","POCS2(134343)","POCS2(13616)","POCS2(1364)","POCS2(136E2)","POCS2(1634)","POCS2(236243)","POCS2(2363)","POCS3(14)","POCS3(14)","POCS3(1565)","POCS3(16546)","POCS3(16546)","POCS3(1656)","POCS3(245)","POCS3(26)","POCS3(2656)","POCSH(1352)","POCSH(142)","POCSH(25)","SBH;SB3","CS2(1634)","CS2(26E3)","CS2(E1","CS3(1541)","CS3(1564531)","CSH(1251)","CSH(1352)","CSH(152)","CSH(2625)","PO3(1365)","PO3(E1","PO3(E1","PO3(E5)","PO3(E5)","POCS2(13414)","POCS2(13416)","POCS2(136343)","POCS2(13636)","POCS2(1363634)","POCS2(1363642)","POCS2(136E1)","POCS2(146)","POCS2(2343)","POCS2(23436)","POCS3(151463)","POCS3(1546)","POCS3(1561)","POCSH(1362)","POCSH(152)","POCSH(252)","POCSH(2536)","SB2;SBH","SBH(TUR)","SBH(UR);SB3"},oc]]


(* ::Input::Initialization:: *)
Scored[playitem_play]:=Module[{adv},adv=PlayEvent[playitem[[6]]][[3]];Length[StringCases[adv,"-H"]]]


(* ::Input::Initialization:: *)
Scored[adv_String]:=Length[StringCases[adv,"-H"]]


(* ::Input::Initialization:: *)
Stats[playitem_play]:=Stats[playitem,{0,0,0}]
Stats[playitem_play,bases:{0,0,0}]:=Module[{outcome,mods,advances,sach,sacf},{outcome,mods,advances}=PlayEvent[playitem[[6]]];
sach=(Or@@StringMatchQ[mods,"*SH*"])//Boole;sacf=(Or@@StringMatchQ[mods,"*SF*"])//Boole;Which[MemberQ[{"HR","H"},outcome],{1,1,1,0,0,1,1+Scored[advances]-Length[StringCases[advances,"B-H"]],0,0,0,0,0,0,0,0,0,0,0},
MemberQ[{"HR6","H7","H8","H9","HR7","HR8","HR9","HR89","HR78"},outcome]||StringMatchQ[outcome,RegularExpression["HR\\d+"]],{1,1,1,0,0,1,1+Scored[advances]-Length[StringCases[advances,"B-H"]],0,0,0,0,0,0,0,0,0,0,0},
MemberQ[{"HP"},outcome],{0,0,0,0,0,0,Scored[advances],0,0,0,1,0,0,0,0,0,0,0},
StringMatchQ[outcome,"W"]||StringMatchQ[outcome,"W+*"],{0,0,0,0,0,0,Scored[advances],1,0,0,0,0,0,0,0,0,0,0},
MemberQ[{"IW","I"},outcome]||StringMatchQ[outcome,"IW+*"]||StringMatchQ[outcome,"I+*"],{0,0,0,0,0,0,Scored[advances],0,1,0,0,0,0,0,0,0,0,0},
StringMatchQ[outcome,"K*"]||StringMatchQ[outcome,"K+*"]||StringMatchQ[outcome,RegularExpression["K\\d+"]],{1,0,0,0,0,0,Scored[advances],0,0,1,0,0,0,0,0,0,0,0},
MemberQ[{"T","T7","T8","T9"},outcome]||StringMatchQ[outcome,"T+*"]||StringMatchQ[outcome,RegularExpression["T\\d+"]],{1,0,1,0,1,0,Scored[advances],0,0,0,0,0,0,0,0,0,0,0},
MemberQ[{"D","D7","D8","D9","DGR","D1","D3","D4","D5","D6","DGR7","DGR8","DGR9","DGR89","DGR78"},outcome]||StringMatchQ[outcome,"D+*"]||StringMatchQ[outcome,RegularExpression["D\\d+"]],{1,0,1,1,0,0,Scored[advances],0,0,0,0,0,0,0,0,0,0,0},
MemberQ[{"S","S1","S2","S3","S4","S5","S6","S7","S8","S9","S89","S78","S19"},outcome]||StringMatchQ[outcome,"S+*"]||StringMatchQ[outcome,RegularExpression["S\\d+"]],{1,0,1,0,0,0,Scored[advances],0,0,0,0,0,0,0,0,0,0,0},
Or[MemberQ[Map["E"<>#&,Characters["123456789"]],outcome]||StringMatchQ[outcome,RegularExpression["\\d+E\\d"]],StringMatchQ[outcome,RegularExpression["\\dE\\d"]]],{1,0,0,0,0,0,Scored[advances],0,0,0,0,0,0,0,1,0,0,0},
MemberQ[Map["FC"<>#&,Characters["123456789"]],outcome],{1,0,0,0,0,0,Scored[advances],0,0,0,0,0,0,0,0,0,0,0},
NumberQ[ToExpression[outcome]]||StringMatchQ[outcome,RegularExpression["\\d+\\(.*"]]||StringMatchQ[outcome,RegularExpression["\\d+[-|+]"]],
{1-sach-sacf,0,0,0,0,0,Scored[advances],0,0,0,0,sach,sacf,0,0,If[Or@@Table[Or@@Map[StringMatchQ[mods[[k]],#]&,{"*GDP*","TDP","BPDP","BGDP","DP"}],{k,1,Length[mods]}],1,0],0,0},
StringMatchQ[outcome,RegularExpression["C"]],{0,0,0,0,0,0,Scored[advances],0,0,0,0,0,0,0,0,0,0,0},
RunningPlayQ[playitem],Table[0,{Length[statlinecats]}],True,Print[ToString[playitem]<>"\nnot identified"];Table[0,{Length[statlinecats]}]]]


(* ::Input::Initialization:: *)
Participants[game_retrogame]:={{#[[1]],#[[2]],{#[[0]],#[[3]],#[[4]],#[[5]]}}&/@List@@(game//Select[#,(Head[#]==start||Head[#]==sub)&]&//Select[#,#[[3]]==0&]&)//Sort//Split[#,First[#1]==First[#2]&]&//Map[Append[Drop[First[#],-1],Last[Transpose[Last/@#]]]&,#]&,{#[[1]],#[[2]],{#[[0]],#[[3]],#[[4]],#[[5]]}}&/@List@@(game//Select[#,(Head[#]==start||Head[#]==sub)&]&//Select[#,#[[3]]==1&]&)//Sort//Split[#,First[#1]==First[#2]&]&//Map[Append[Drop[First[#],-1],Last[Transpose[Last/@#]]]&,#]&}


(* ::Input::Initialization:: *)
Result[playstring_?IntegerQ]:="Out";Result[playstring_String]:=Select[PlayResults,StringMatchQ[playstring,#<>"*"]&]//If[#=={},"Out",First[#]]&;
Result[playrec_play]:=Result[Last[playrec]];


(* ::Input::Initialization:: *)
HomeRunQ[playstring_String]:=MemberQ[{"HR7","HR8","HR9","H7","H8","H9","HR"},Result[playstring]];
HomeRunQ[playrec_play]:=HomeRunQ[Last[playrec]];
HomeRunQ[other_]:=False


(* ::Input::Initialization:: *)
ResultQ[result_String,p_play]:=ToExpression[result<>"Q"][p];


(* ::Input::Initialization:: *)
ResultQ[results_List,p_play]:=Or@@Map[ResultQ[#,p]&,results];


(* ::Input::Initialization:: *)
MapThread[(#1[playstring_String]:=MemberQ[#2,Result[playstring]];
#1[playrec_play]:=#1[Last[playrec]])&,{{SingleQ,DoubleQ,TripleQ,IPHomeRunQ},
{{"S"},{"D","DGR"},{"T"},{"H7","H8","H9","HR7","HR8","HR9"}}}];


(* ::Input::Initialization:: *)
IPHomeRuns[g_retrogame]:=Map[{ID[g],#}&,List@@(Select[g,Head[#]==play&]//Select[g,IPHomeRunQ[#]&]&)];
HomeRuns[g_retrogame]:=Map[{ID[g],#}&,List@@(Select[g,Head[#]==play&]//Select[g,HomeRunQ[#]&]&)];
Triples[g_retrogame]:=Map[{ID[g],#}&,List@@(Select[g,Head[#]==play&]//Select[g,TripleQ[#]&]&)];
Doubles[g_retrogame]:=Map[{ID[g],#}&,List@@(Select[g,Head[#]==play&]//Select[g,DoubleQ[#]&]&)];
Singles[g_retrogame]:=Map[{ID[g],#}&,List@@(Select[g,Head[#]==play&]//Select[g,SingleQ[#]&]&)];
IPHomeRuns[team_String/;StringLength[team]==3,year_]:=Map[{ID[#],Select[Plays[#,team],IPHomeRunQ[#]&]}&,AllEvents[team,year]]//Select[#,#[[2]]!={}&]&//Map[Function[v,Map[{First[v],#}&,Last[v]]],#]&//Flatten[#,1]&;
HomeRuns[team_String/;StringLength[team]==3,year_]:=Map[{ID[#],Select[Plays[#,team],HomeRunQ[#]&]}&,AllEvents[team,year]]//Select[#,#[[2]]!={}&]&//Map[Function[v,Map[{First[v],#}&,Last[v]]],#]&//Flatten[#,1]&;
Triples[team_String/;StringLength[team]==3,year_]:=Map[{ID[#],Select[Plays[#,team],TripleQ[#]&]}&,AllEvents[team,year]]//Select[#,#[[2]]!={}&]&//Map[Function[v,Map[{First[v],#}&,Last[v]]],#]&//Flatten[#,1]&;
Doubles[team_String/;StringLength[team]==3,year_]:=Map[{ID[#],Select[Plays[#,team],DoubleQ[#]&]}&,AllEvents[team,year]]//Select[#,#[[2]]!={}&]&//Map[Function[v,Map[{First[v],#}&,Last[v]]],#]&//Flatten[#,1]&;
Singles[team_String/;StringLength[team]==3,year_]:=Map[{ID[#],Select[Plays[#,team],SingleQ[#]&]}&,AllEvents[team,year]]//Select[#,#[[2]]!={}&]&//Map[Function[v,Map[{First[v],#}&,Last[v]]],#]&//Flatten[#,1]&;


(* ::Input::Initialization:: *)
RosterFilePresent[teamcode_,year_]:=Module[{cd,q,da,dn,qa,qn},If[MemberQ[EventFileYears,year],cd=Directory[];SetDirectory[HomeDirectory[]];SetDirectory[RetrosheetDirectory[]];SetDirectory["ef/"<>ToString[year]<>"eve"];q=MemberQ[FileNames[],teamcode<>ToString[year]<>".ROS"];SetDirectory[cd],q=False];SetDirectory[cd];q]


(* ::Input::Initialization:: *)
Roster[teamcode_,year_]:=Roster[teamcode,year]=If[MemberQ[EventFileYears,year],If[MemberQ[TeamCodeList[year]//Transpose//First,teamcode],Module[{dstring,Lstring,cd=Directory[]},dstring=ToString[year]<>"eve";If[RosterFilePresent[teamcode,year],SetDirectory[HomeDirectory[]];SetDirectory["retrosheet/ef"];SetDirectory[dstring];Import[teamcode<>ToString[year]<>".ROS","CSV"]//(SetDirectory[cd];#)&,Message[Roster::"missing",teamcode];{}]],Message[TeamCode::"badcode",teamcode];{}],Message[EventFile::"invalidyear",year];{}];


(* ::Input::Initialization:: *)
(*
SelectGames[year_?MemberQ[EventFileYears,#]&,condition_]:=Module[{tms=TeamCodeList[year]//Transpose//First,result},Off[Part::partw];result={year,Flatten[Map[Select[Events[#,year],condition[#]&]&,tms]]};Map[(Events[#,year]=.)&,tms];On[Part::partw];result]
*)


(* ::Input::Initialization:: *)

SelectGames[year_?IntegerQ,condition_]:=Module[{tms=TeamCodeList[year]//Transpose//First,result},Off[Part::partw];Off[Characters::argx];result={year,Flatten[Map[Select[Events[#,year],condition[#]&]&,tms]]};Map[(Events[#,year]=.)&,tms];On[Characters::argx];On[Part::partw];result]



(* ::Input::Initialization:: *)
SelectGames[gamelist_List,condition_,comment_String:" "]:={comment,Select[gamelist,condition]}


(* ::Input::Initialization:: *)
EndsInResultQ[game_retrogame,result_String]:=Innings[game]//Last//Last//(Result[#]==result)&


(* ::Input::Initialization:: *)
EndsInResultQ[game_retrogame,resultlist_List]:=Innings[game]//Last//Last//MemberQ[resultlist,Result[#]]&


(* ::Input::Initialization:: *)
StartingBattingOrder[game_retrogame,side_?IntegerQ]:=List@@(Select[Select[game,(Head[#]==start)&] ,((#[[4]]>0)&&(#[[3]]==side))&])//Sort[#,(#1[[4]]<=#2[[4]])&]&//Map[{#[[1]],#[[2]]}&,#]&



(* ::Input::Initialization:: *)
StartingBattingOrder[game_retrogame,teamcode_String]:=Which[VisitingTeam[game]==teamcode,StartingBattingOrder[game,0],HomeTeam[game]==teamcode,StartingBattingOrder[game,1],True,"bad code"];


(* ::Input::Initialization:: *)
TeamCodeList[year_]:=TeamCodeList[year]=If[MemberQ[EventFileYears,year],Module[{dstring},dstring=ToString[year]<>"eve";SetDirectory[HomeDirectory[]];SetDirectory[RetrosheetDirectory[]];SetDirectory["ef"];SetDirectory[dstring];Import["TEAM"<>ToString[year],"CSV"]//Select[#,Length[#]==4&]&],Message[EventFile::"invalidyear",year];TeamCodeListBasic[year]];


(* ::Input::Initialization:: *)
TeamCodeListBasic[year_]:=((GameLogs[year]//Transpose//Union[Take[#,{4,5}]//Transpose,Take[#,{7,8}]//Transpose]&)/.{"AL"->"A","NL"->"N","FL"->"F","UA"->"U"})//Map[Join[#,{" ", " "}]&,#]&


(* ::Input::Initialization:: *)
TeamsPlayedBy[teamcode_,year_]:=TeamsPlayedBy[teamcode,year]=GameLogs[year]//Select[#,MemberQ[#,teamcode]&]&//Union@@(Part[Transpose[#],{4,7}])&//Complement[#,{teamcode}]&


(* ::Input::Initialization:: *)
VisitingTeam[game_retrogame]:=Select[game,(#[[1]]=="visteam")&]//First//Last


(* ::Input::Initialization:: *)
HomeTeam[game_retrogame]:=Select[game,(#[[1]]=="hometeam")&]//First//Last


(* ::Input::Initialization:: *)
WinningPitcher[game_retrogame]:=Select[game,(Head[#]==info)&]//Select[#,(#[[1]]== "wp")&]&//If[#==={}," ",First[#][[2]]]&


(* ::Input::Initialization:: *)
LosingPitcher[game_retrogame]:=Select[game,(Head[#]==info)&]//Select[#,(#[[1]] == "lp")&]&//If[#=== {}," ",First[#][[2]]]&


(* ::Input::Initialization:: *)
SavingPitcher[game_retrogame]:=Select[game,(Head[#]==info)&]//Select[#,(#[[1]]==  "save")&]&//If[#==={}," ",First[#][[2]]]&


(* ::Input::Initialization:: *)
Winner[game_retrogame]:=Winner[GameLogData[game]];
Loser[game_retrogame]:=Loser[GameLogData[game]];



(* ::Input::Initialization:: *)
Attendance[g_retrogame]:=g/.{retrogame[a___,info["attendance",n_],b___]->n}/.{retrogame[a___]->0}


(* ::Input::Initialization:: *)
Temperature[game_retrogame]:=(List@@Select[List@@game,(#[[1]]==="temp")&])//(If[#== {},0,First[#][[2]]])&


(* ::Input::Initialization:: *)
TemperaturePlot[teamcode_,year_]:=(ListPlot[#1,Joined->False,PlotRange->{20,110}])&[({DayOfYear[GameDate[#1]],Temperature[#1]}&)/@Events[teamcode,year]]


(* ::Input::Initialization:: *)
WorldSeriesYears[]:=WorldSeriesYears[]=Module[{fns},SetDirectory[HomeDirectory[]];SetDirectory["retrosheet/post"];fns=FileNames[];
Select[fns,StringMatchQ[#,"*WS.EVE"]&]//Map[StringTake[#,4]&,#]&//Map[ToExpression,#]&];


(* ::Input::Initialization:: *)
WorldSeries[year_]:=If[MemberQ[WorldSeriesYears[],year],Module[{dstring,L1},SetDirectory[HomeDirectory[]];SetDirectory["retrosheet/post"];L1=Import[ToString[year]<>"WS.EVE","CSV"]//Map[Reverse,Split[Reverse[#],(First[#]=!="id")&]]&//Reverse//Select[#,Length[#]>50&]&//Map[processgame,#]&;Map[MapAt[id["WS-"<>#[[1]]]&,#,1]&,L1]],
Message[EventFile::"invalidyear",year];{}];



(* ::Input::Initialization:: *)
ALCSYears[]:=ALCSYears[]=(SetDirectory[$HomeDirectory];SetDirectory[RetrosheetDirectory[]];SetDirectory["ef/allpost"];Module[{files},
files=FileNames[RegularExpression["\\d\\d\\d\\dALCS.EVE"]];
Map[ToExpression[StringTake[#,4]]&,files]])


(* ::Input::Initialization:: *)
NLCSYears[]:=ALCSYears[]=(SetDirectory[$HomeDirectory];SetDirectory[RetrosheetDirectory[]];SetDirectory["ef/allpost"];Module[{files},
files=FileNames[RegularExpression["\\d\\d\\d\\dNLCS.EVE"]];
Map[ToExpression[StringTake[#,4]]&,files]])


(* ::Input::Initialization:: *)
NLCS[year_]:=NLCS[year]=Module[{L1,L2},If[Not[MemberQ[NLCSYears[],year]],Message[NLCS::"None",year];{},
SetDirectory[HomeDirectory[]];SetDirectory[RetrosheetDirectory[]];SetDirectory["ef/allpost"];L1=Import[ToString[year]<>"NLCS.EVE","CSV"]//Map[Reverse,Split[Reverse[#],(First[#]=!="id")&]]&//Reverse//Select[#,Length[#]>50&]&//Map[processgame,#]&;L2=Map[MapAt[id["LC-"<>#[[1]]]&,#,1]&,L1];L2]]


(* ::Input::Initialization:: *)
ALCS[year_]:=ALCS[year]=Module[{L1,L2},If[Not[MemberQ[ALCSYears[],year]],Message[ALCS::"None",year];{},
SetDirectory[HomeDirectory[]];SetDirectory[RetrosheetDirectory[]];SetDirectory["ef/allpost"];L1=Import[ToString[year]<>"ALCS.EVE","CSV"]//Map[Reverse,Split[Reverse[#],(First[#]=!="id")&]]&//Reverse//Select[#,Length[#]>50&]&//Map[processgame,#]&;L2=Map[MapAt[id["LC-"<>#[[1]]]&,#,1]&,L1];L2]]



(* ::Input::Initialization:: *)
ALDSYears[]:=ALDSYears[]=(SetDirectory[$HomeDirectory];SetDirectory[RetrosheetDirectory[]];SetDirectory["ef/allpost"];Module[{files},
files=FileNames[RegularExpression["\\d\\d\\d\\dALD\\d.EVE"]];
Map[ToExpression[StringTake[#,4]]&,files]])


(* ::Input::Initialization:: *)
NLDSYears[]:=ALCSYears[]=(SetDirectory[$HomeDirectory];SetDirectory[RetrosheetDirectory[]];SetDirectory["ef/allpost"];Module[{files},
files=FileNames[RegularExpression["\\d\\d\\d\\dNLD\\d.EVE"]];
Map[ToExpression[StringTake[#,4]]&,files]])


(* ::Input::Initialization:: *)
NLDS[year_]:=NLDS[year]=Module[{L1a,L1b,L2},If[Not[MemberQ[NLDSYears[],year]],Message[NLDS::"None",year];{},
SetDirectory[HomeDirectory[]];SetDirectory[RetrosheetDirectory[]];SetDirectory["ef/allpost"];L1a=Import[ToString[year]<>"NLD1.EVE","CSV"]//Map[Reverse,Split[Reverse[#],(First[#]=!="id")&]]&//Reverse//Select[#,Length[#]>50&]&//Map[processgame,#]&;
L1b=Import[ToString[year]<>"NLD2.EVE","CSV"]//Map[Reverse,Split[Reverse[#],(First[#]=!="id")&]]&//Reverse//Select[#,Length[#]>50&]&//Map[processgame,#]&;L2={Map[MapAt[id["LC-"<>#[[1]]]&,#,1]&,L1a],Map[MapAt[id["LC-"<>#[[1]]]&,#,1]&,L1b]};L2]]


(* ::Input::Initialization:: *)
ALDS[year_]:=ALDS[year]=Module[{L1,L2},If[Not[MemberQ[ALDSYears[],year]],Message[ALDS::"None",year];{},
SetDirectory[HomeDirectory[]];SetDirectory[RetrosheetDirectory[]];SetDirectory["ef/allpost"];L1a=Import[ToString[year]<>"ALD1.EVE","CSV"]//Map[Reverse,Split[Reverse[#],(First[#]=!="id")&]]&//Reverse//Select[#,Length[#]>50&]&//Map[processgame,#]&;
L1b=Import[ToString[year]<>"ALD2.EVE","CSV"]//Map[Reverse,Split[Reverse[#],(First[#]=!="id")&]]&//Reverse//Select[#,Length[#]>50&]&//Map[processgame,#]&;L2={Map[MapAt[id["LC-"<>#[[1]]]&,#,1]&,L1a],Map[MapAt[id["LC-"<>#[[1]]]&,#,1]&,L1b]};L2]]



(* ::Input::Initialization:: *)
WildCardFiles[]:=WildCardFiles[]=(SetDirectory[HomeDirectory[]];
SetDirectory[RetrosheetDirectory[]];SetDirectory["ef/allpost"];
Join[Complement[FileNames["*ALW*"],FileNames["*ALWS"]],Complement[FileNames["*NLW*"],FileNames["*NLWS"]]])



(* ::Input::Initialization:: *)
WildCard[league_,year_]:=WildCard[league,year]=Module[{files,gameslist},
files=Select[WildCardFiles[],StringMatchQ[#,ToString[year]<>league<>"*"]&];
If[files=={},Message[WildCard::"None",year];{},
SetDirectory[HomeDirectory[]];SetDirectory[RetrosheetDirectory[]];SetDirectory["ef/allpost"];
gameslist=Map[(Import[#,"CSV"]//Map[Reverse,Split[Reverse[#],(First[#]=!="id")&]]&//Reverse//Select[#,Length[#]>50&]&//Map[processgame,#]&)&,files];
Flatten[gameslist]]];


(* ::Input::Initialization:: *)

ClearRosters[year_?IntegerQ]:=If[MemberQ[EventFileYears,year],Module[{t=MemoryInUse[],tms=TeamCodeList[year]//Transpose//First},Off[Unset::norep];Map[(Roster[#,year]=.)&,tms];On[Unset::norep];t-MemoryInUse[]],0];

ClearRosters[years_List]:=Total[ClearRosters/@years];

ClearRosters[year1_?IntegerQ,year2_?IntegerQ]:=ClearRosters[Range[year1,year2]];

ClearRosters[]:=(Off[Transpose::nmtx];ClearRosters[EventFileYears];On[Transpose::nmtx])


(* ::Input::Initialization:: *)
BaseballPaletteX[]:=Grid[Join[{{Button[Style["Load Baseball","Small"],Needs["Baseball`"],Appearance->"Palette"]," "," "," "," "," "," "," "}},Map[Button[Style[#,"Small"],YearPalette[#],Appearance->"Palette"]&,EventFileYears//PadRight[#,Length[#]+Mod[Length[#],8]," "]&]//Partition[#,8]&]]//CreatePalette[#,WindowTitle->"BaseballPalette"]&


(* ::Input::Initialization:: *)
YearGrid[year_]:=Grid[Join[Map[Button[Style[FromTeamCode[#,year],"Small"],RosterPalette[#,year],Appearance->"Palette"]&,TeamCodeList[year][[All,1]]//PadRight[#,Length[#]+Mod[Length[#],2]," "]&]//Partition[#,2]&,{{PasteButton[Style["AL Season Plot","Small"],SeasonPlot[year,"AL"],Appearance->"Palette"],PasteButton[Style["NL Season Plot","Small"],SeasonPlot[year,"NL"],Appearance->"Palette"]}}]];


(* ::Input::Initialization:: *)
BaseballPalette[]:=Manipulate[YearGrid[year],{{year,Last[EventFileYears],"year"},EventFileYears}]//CreatePalette[#,WindowTitle->"BaseballPalette"]&


(* ::Input::Initialization:: *)
YearPalette[year_]:=If[MemberQ[EventFileYears,year],Grid[Join[Map[Button[Style[FromTeamCode[#,year],"Small"],RosterPalette[#,year],Appearance->"Palette"]&,TeamCodeList[year][[All,1]]//PadRight[#,Length[#]+Mod[Length[#],2]," "]&]//Partition[#,2]&,{{PasteButton[Style["AL Season Plot","Small"],SeasonPlot[year,"AL"],Appearance->"Palette"],PasteButton[Style["NL Season Plot","Small"],SeasonPlot[year,"NL"],Appearance->"Palette"]}}]]//CreatePalette[#,WindowTitle->ToString[year]]&,Message[EventFile::"invalidyear",year]];


(* ::Input::Initialization:: *)
RosterPalette[team_String,year_Integer]:=If[MemberQ[EventFileYears,year],If[MemberQ[TeamCodeListBasic[year][[All,1]],team],Grid[Map[PasteButton[Style[#[[3]]<>" "<>#[[2]],"Small"],#[[1]],Appearance->"Palette"]&,Roster[team,year]//PadRight[#,Length[#]+Mod[Length[#],2],{{" "," "," "," "," "}}]&]//Partition[#,2]&]//CreatePalette[#,WindowTitle->team<>ToString[year]]&,Message[TeamCode::badcode,team]],Message[EventFile::"invalidyear",year]]


(* ::Input::Initialization:: *)
End[];


EndPackage[];



